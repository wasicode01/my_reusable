# This is a basic workflow to help you get started with Actions

name: Print

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      saludo:
        type: string
      mensaje:
        type: string
        required: false
        default: "QUE HAY"
      environment:
        type: string
      pathToDeploy:
        type: string
      myVersion:
        type: string
        

env:
  NOMBRE_ENV: 'MY_INPUT_${{ inputs.saludo }}'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  mi_saludo:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: print Path
        run: echo ${{ inputs.pathToDeploy }}
      
      - name: Upper
        run: |
          UPPER_ENVIRONMENT_NAME=$(echo ${{ inputs.environment }} | tr '[:lower:]' '[:upper:]')
          echo "AZURE_CREDENTIALS_ENV=$(echo AZURE_CREDENTIALS_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
          echo "VPN_CA_CRT_ENV=$(echo VPN_CA_CRT_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
          echo "VPN_USER_CRT_ENV=$(echo VPN_USER_CRT_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
          echo "VPN_USER_KEY_ENV=$(echo VPN_USER_KEY_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
          echo "VPN_SECRET_USERNAME_PASSWORD_ENV=$(echo VPN_SECRET_USERNAME_PASSWORD_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
          echo  "VPN_TLS_KEY_ENV=$(echo VPN_TLS_KEY_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
          echo  "VPN_HOST_IP_ENV=$(echo VPN_HOST_IP_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
          echo  "YAPE_VPN_RESOLVECTL_ENV=$(echo YAPE_VPN_RESOLVECTL_$UPPER_ENVIRONMENT_NAME)" >> $GITHUB_ENV
      - name: print environments
        run: |
          echo "${{ env.UPPER_ENVIRONMENT_NAME }}"
          echo ${{ env.AZURE_CREDENTIALS_ENV }}
          echo ${{ env.VPN_USER_CRT_ENV }}
          echo ${{ env.VPN_USER_CRT_ENV }}
          echo ${{ env.VPN_USER_KEY_ENV }}
          echo ${{ env.VPN_SECRET_USERNAME_PASSWORD_ENV }}
          echo ${{ env.VPN_TLS_KEY_ENV }}
          echo ${{ env.VPN_HOST_IP_ENV }}
          echo ${{ env.YAPE_VPN_RESOLVECTL_ENV }}
      - name: print env
        run: echo '${{ env.GLOBAL_ENVIRONMENT_NAME}}'
      - name: if var
        run: |
          echo "valor de var ${{ vars['REPO_VALOR_QA'] }}"
          echo "segundo var  ${{ vars.REPO_VALOR_QA }}"
          if [ vars["REPO_VALOR_QA"] = '5' ]; then
            echo "valor es cinco"
          else
            echo "que paso  ${{ vars['REPO_VALOR_QA'] }}"
          fi
      - name: Print Readme
        run: |
          cat README.md
      - name: Print mensaje
        run: echo "${{ inputs.mensaje }}"

      # Runs a single command using the runners shell
      - name: Get repository
        run: |
          echo "ONLY_REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
      - name: Print repo
        run:
          echo "name repo - ${{ env.ONLY_REPO_NAME }}"
      - name: Run a one-line script
        run: |          
          echo "Mi repository ${{ github.repository }}"
      - name: Print version
        run: echo ${{ inputs.myVersion }}
